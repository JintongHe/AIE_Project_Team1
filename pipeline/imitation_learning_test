from mushroom_rl.core import Core, Agent
import matplotlib.pyplot as plt
import os
import matplotlib.pyplot as plt
import os
import sys
from loco_mujoco import LocoEnv
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.nn as nn
import torch.nn.functional as F
import sys
from imitation_learning.utils import get_agent
import math
import numpy as np

#Temporary reward function
def ankle_training_reward(state, action, next_state):
    """Composite reward function for ankle coordination training"""
    # State indices based on provided observation variables
    q_pelvis_tx, q_pelvis_tz, q_pelvis_ty = state[0], state[1], state[2]
    q_pelvis_tilt, q_pelvis_list = state[3], state[4]
    dq_pelvis_tx = state[18]  # Forward velocity
    ankle_torque = action[7]  # TD3-generated ankle control

    # -------------------------------------------------
    # 1. Forward Motion Incentive (40% weight)
    # -------------------------------------------------
    target_velocity = 1.5  # m/s
    velocity_ratio = dq_pelvis_tx / target_velocity
    r_forward = 0.4 * np.clip(velocity_ratio, 0, 1)

    # -------------------------------------------------
    # 2. Stability Components (30% weight)
    # -------------------------------------------------
    # Torso orientation penalty
    tilt_penalty = 0.15 * np.abs(q_pelvis_tilt)
    list_penalty = 0.15 * np.abs(q_pelvis_list)
    
    # COM height maintenance
    target_height = 0.9  # Adjust based on your agent's normal standing height
    height_penalty = 0.1 * np.abs(q_pelvis_ty - target_height)
    
    r_stability = 0.3 - (tilt_penalty + list_penalty + height_penalty)

    # -------------------------------------------------
    # 3. Ankle-Specific Rewards (20% weight)
    # -------------------------------------------------
    # Torque efficiency penalty
    torque_penalty = 0.05 * np.square(ankle_torque)
    
    # Foot contact stability (simplified)
    contact_penalty = 0.15 if q_pelvis_tz < 0.05 else 0  # Approximate foot-ground contact
    
    r_ankle = 0.2 - (torque_penalty + contact_penalty)

    # -------------------------------------------------
    # 4. Survival Bonus (10% weight)
    # -------------------------------------------------
    survival_bonus = 0.1 if np.abs(q_pelvis_tilt) < 0.26 and np.abs(q_pelvis_list) < 0.26 else 0  # ~15 degrees

    # -------------------------------------------------
    # Total Reward Calculation
    # -------------------------------------------------
    return r_forward + r_stability + r_ankle + survival_bonus

#Extract ankle features from state
def get_right_ankle_substate(state):
    # Indices of right ankle related features in the observation space
    #right_ankle_indices = [
    #    10,  # q_ankle_angle_r
    #    29   # dq_ankle_angle_r
    #]
    
    #right_ankle_substate = state[right_ankle_indices]
    
    #return right_ankle_substate
    return state

#Extract ankle action from action
def get_action_substate(action):
    # Index of the action related feature
    action_index = 7
    
    # Extract the substate with only the action related feature
    action_substate = action[action_index]
    
    return action_substate

#Model for predicting right ankle action
class PositionalEncoding(nn.Module):
    def __init__(self, d_model, max_len=5000):
        super(PositionalEncoding, self).__init__()
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0).transpose(0, 1)
        self.register_buffer('pe', pe)

    def forward(self, x):
        return x + self.pe[:x.size(0), :]

class TransformerModel(nn.Module):
    def __init__(self, input_dim, output_dim, nhead=4, num_layers=2, dim_feedforward=128):
        super(TransformerModel, self).__init__()
        self.model_type = 'Transformer'
        self.src_mask = None
        self.pos_encoder = PositionalEncoding(input_dim)
        encoder_layers = nn.TransformerEncoderLayer(input_dim, nhead, dim_feedforward)
        self.transformer_encoder = nn.TransformerEncoder(encoder_layers, num_layers)
        self.encoder = nn.Linear(input_dim, input_dim)
        self.decoder = nn.Linear(input_dim, output_dim)
        self.init_weights()

    def init_weights(self):
        initrange = 0.1
        self.encoder.weight.data.uniform_(-initrange, initrange)
        self.decoder.weight.data.uniform_(-initrange, initrange)

    def forward(self, src):
        if self.src_mask is None or self.src_mask.size(0) != len(src):
            device = src.device
            mask = self._generate_square_subsequent_mask(len(src)).to(device)
            self.src_mask = mask

        src = self.encoder(src)
        src = self.pos_encoder(src)
        output = self.transformer_encoder(src, self.src_mask)
        output = self.decoder(output)
        return output[-1]

    def _generate_square_subsequent_mask(self, sz):
        mask = (torch.triu(torch.ones(sz, sz)) == 1).transpose(0, 1)
        mask = mask.float().masked_fill(mask == 0, float('-inf')).masked_fill(mask == 1, float(0.0))
        return mask



def main():
    # Initialize the humanoid environment
    env_id = "HumanoidTorque.walk.perfect"
    mdp = LocoEnv.make(env_id, use_box_feet=True)

    print("Observation Space:", mdp.info.observation_space.low)
    print("Observation Space Shape:", mdp.info.observation_space.shape)
    print("Observation Space:", mdp.info.observation_space.low)
    print("Observation Space Shape:", mdp.info.observation_space.shape)

    print("Observation Variables:")
    for obs in mdp.get_all_observation_keys():
        print(obs)
    print("Action Space:", mdp.info.action_space)
    print("Action Space Shape:", mdp.info.action_space.shape)
    print("Observation Variables:")
    for obs in mdp.get_all_observation_keys():
        print(obs)
    print("Action Space:", mdp.info.action_space)
    print("Action Space Shape:", mdp.info.action_space.shape)


    # Load the expert agent
    agent_file_path = os.path.join(os.path.dirname(__file__), "agent_epoch_423_J_991.255877.msh")
    agent = Agent.load(agent_file_path)


    if torch.backends.mps.is_available():
        device = torch.device("mps") 
    else: 
        device = torch.device("cpu")

    #Initialize the model
    state = mdp.reset()
    input_dim = 36  # Number of features in the substate
    output_dim = 1  # Number of actions
    model = TransformerModel(input_dim, output_dim).to(device)

    # Initialize the optimizer
    optimizer = torch.optim.Adam(model.parameters(), lr=0.0001)
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=100, gamma=0.5)  # Decrease LR by a factor of 0.1 every 50 epochs
    batch_size = 1000
    epoch_losses = []
    num_epochs = 1000
    patience = 20  # Number of epochs to wait for improvement
    best_loss = float('inf')
    epochs_no_improve = 0

    # Run evaluation for 1000 episodes
    for epoch in range(num_epochs):
        state = mdp.reset()  # Reset the environment for each episode
        right_ankle_substate = get_right_ankle_substate(state)
        step = 0
        batch_loss = 0.0
        epoch_loss = 0.0
        total_reward = 0.0
        trajectory_steps = 0
        total_trajectories = 0.0
        total_tra_steps = 0.0

        # Calculate the weighting factor for the reward loss
        # if epoch < 100:
        #     reward_weight = 1.0
        # else:
        #     reward_weight = min(1.0, (epoch-100) // 100 * 0.1)

        for _ in range(batch_size):
            #print(f"Epoch {epoch + 1}, Step {step + 1}")
            # Get action from expert
            action = agent.draw_action(state)
            right_ankle_action = get_action_substate(action)
            #Get action from ankle model
            right_ankle_substate_tensor = torch.tensor(right_ankle_substate, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
            model_action = model(right_ankle_substate_tensor).squeeze()

            # Calculate loss imitating expert action
            right_ankle_action_tensor = torch.tensor(right_ankle_action, dtype=torch.float32).to(device)
            imitation_loss = F.mse_loss(model_action, right_ankle_action_tensor)
            # batch_loss += loss.item()
            # epoch_loss += loss.item()
            # Replace expert action with model action
            # action[7] = model_action.item()


            # Take action in environment
            next_state, reward, done, _ = mdp.step(action)
            total_reward += reward
            # Calculate environment reward
            env_reward = ankle_training_reward(state, action, next_state)

            # Combine imitation loss and environment reward
            # if trajectory_steps > 200:
            #     combined_loss = imitation_loss * (1 - reward_weight) + torch.tensor(env_reward, dtype=torch.float32).to(device) * reward_weight

            # else:
            #     combined_loss = imitation_loss

            # Accumulate gradients
            #combined_loss.backward()
            imitation_loss.backward()


            
            # ðŸ”¹ Render the environment at every step
            #mdp.render()

            # Update state
            state = next_state
            right_ankle_substate = get_right_ankle_substate(state)
            step += 1

            # Accumulate losses
            batch_loss += imitation_loss.item()
            epoch_loss += imitation_loss.item()



        if epoch%50 == 0:
            #print imitation reward, total reward, and environmental reward
            print(f"Epoch {epoch + 1}, Step {step + 1}")
            print(f"Imitation Loss: {imitation_loss.item()}")
            # print(f"Environment Reward: {env_reward}")
            # print(f"Combined Loss: {imitation_loss_loss.item()}")


        # Perform optimization step after each batch
        optimizer.step()
        optimizer.zero_grad()
        scheduler.step()  # Update the learning rate

        #print(f"Batch completed with average loss: {batch_loss / batch_size}")
        #batch_loss = 0.0

        average_epoch_loss = epoch_loss/(step+1)
        epoch_losses.append(average_epoch_loss)
        print(f"Epoch {epoch + 1} completed with average loss: {average_epoch_loss}")
        # Early stopping check
        if average_epoch_loss < best_loss:
            best_loss = average_epoch_loss
            epochs_no_improve = 0            
        else:
            epochs_no_improve += 1
            if epochs_no_improve >= patience:
                print(f"Early stopping at epoch {epoch + 1}")
                break
        
        if epoch % 5 == 0:
            state = mdp.reset()  # Reset the environment for each episode
            right_ankle_substate = get_right_ankle_substate(state)
            step = 0
            done = False
            while not done:
                right_ankle_substate_tensor = torch.tensor(right_ankle_substate, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
                model_action = model(right_ankle_substate_tensor).squeeze().item()
                action[7] = model_action
                next_state, reward, done, _ = mdp.step(action)
                state = next_state
                right_ankle_substate = get_right_ankle_substate(state)
                step += 1
            print(f"Rollout completed with total steps: {step}")
            if step > 200:
                model_save_path = os.path.join(os.path.dirname(__file__), "twohundred.pth")
                torch.save(model.state_dict(), model_save_path)
                print(f"Model weights saved to {model_save_path}")
        if epoch % 100 == 0:
                model_save_path = os.path.join(os.path.dirname(__file__), "checkpoint.pth")
                torch.save(model.state_dict(), model_save_path)
                print(f"Model weights saved to {model_save_path}")

    # Plot the loss after each epoch
    # plt.plot(range(1, epoch_losses + 1), epoch_losses)
    # plt.xlabel('Epoch')
    # plt.ylabel('Loss')
    # plt.title('Loss After Each Epoch')
    # plt.show()

    # Save the model weights
    model_save_path = os.path.join(os.path.dirname(__file__), "right_ankle_model.pth")
    torch.save(model.state_dict(), model_save_path)
    print(f"Model weights saved to {model_save_path}")

if __name__ == '__main__':
    main()
            